'GSprites, 2020, El Dr. Gusman
'Feel free to use it as you wish

Dim bitmapBuffer(6144) as uByte
Dim attribBuffer(768) as uByte
Dim tableCP(384) as uInteger

asm

    ld hl, ZXBASIC_MEM_HEAP

end asm

sub initTable()


    asm

    ld b, 0
    ld de, _tableCP.__DATA__
    
table_loop:

    push bc
    LD A,B                  ; Calculate Y2,Y1,Y0
    AND %00000111           ; Mask out unwanted bits
    OR %01000000            ; Set base address of screen
    LD H,A                  ; Store in H
    LD A,B                  ; Calculate Y7,Y6
    RRA                     ; Shift to position
    RRA
    RRA
    AND %00011000           ; Mask out unwanted bits
    OR H                    ; OR with Y2,Y1,Y0
    LD H,A                  ; Store in H
    LD A,B                  ; Calculate Y5,Y4,Y3
    RLA                     ; Shift to position
    RLA
    AND %11100000           ; Mask out unwanted bits
    ld l, a
    ld bc, 16
    add hl, bc
    ld a, l 
    ld (de), a
    inc de
    ld a, h
    ld (de), a
    inc de
    add hl, bc
    ld a,l 
    ld (de), a
    inc de
    ld a, h
    ld (de), a
    inc de
    pop bc
    inc b
    ld a,b
    cp 192
    jr nz, table_loop
    
    end asm

end sub

sub printRepeatColorChar(source as uInteger, posY as uByte, posX as uByte, repeat as uByte, attrib as uByte)

    dim buc as uByte

    for buc = posX to posX + repeat
        printColorChar(source, posY, buc, attrib)
    next buc

end sub

function ZXCharAddress(character as string) as uinteger

    Dim vals as uinteger
    vals = code(character$(1))
    vals = vals * 8 + 15360
    return vals

end function

sub printZXString(toPrint as string, posY as uByte, posX as uByte, attrib as uByte)

    Dim buc as ubyte
    Dim vals as uinteger

    for buc = posX to posX + len(toPrint) - 1

        vals = code(toPrint$(buc - posX + 1))
        vals = vals * 8 + 15360

        printColorChar(vals, posY, buc, attrib)

    next buc

end sub

function fastcall createAttrib(tinta as uByte, papel as uByte, brillo as uByte, parpadeo as uByte) as uByte

    asm

    exx
    pop hl
    exx
    pop bc
    pop de
    pop hl
    exx
    push hl
    exx

    and 7
    ld c, a
    ld a, b
    rla
    rla
    rla
    and 56
    or c
    ld c, a
    ld a, d
    cp 0
    jr z, noBrightAttrib
    ld a, c
    or 64
    ld c, a
noBrightAttrib:
    ld a, h
    cp 0
    jr z, noFlash
    ld a, c
    or 128
    or c
    ld c, a
noFlash:
    ld a,c

    end asm

end function

sub fastcall setAttrib(yPos as uinteger, xPos as uinteger, attrib as uInteger)

    asm

    exx
    pop hl
    exx
    pop de
    pop bc
    exx
    push hl
    exx

    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl

    add hl, de
    ld de, _attribBuffer.__DATA__
    add hl, de
    ld (hl), c

    end asm

end sub 

sub fastcall clearScreen(attrib as uByte)

    asm
    
    ld de, _bitmapBuffer.__DATA__ + 1
    ld hl, _bitmapBuffer.__DATA__
    ld (hl), 0
    ld bc, 6143
    ldir

    ld de, _attribBuffer.__DATA__ + 1
    ld hl, _attribBuffer.__DATA__
    ld (hl), a
    ld bc, 767
    ldir

    end asm

end sub

sub fastcall clearScreenTop(attrib as uByte)

    asm
    
    ld de, _bitmapBuffer.__DATA__ + 1
    ld hl, _bitmapBuffer.__DATA__
    ld (hl), 0
    ld bc, 1535
    ldir

    ld de, _attribBuffer.__DATA__ + 1
    ld hl, _attribBuffer.__DATA__
    ld (hl), a
    ld bc, 191
    ldir

    end asm

end sub

sub fastcall clearScreenCenter(attrib as uByte)

    asm
    
    ld de, _bitmapBuffer.__DATA__ + 1 + 1536
    ld hl, _bitmapBuffer.__DATA__ + 1536
    ld (hl), 0
    ld bc, 3071
    ldir

    ld de, _attribBuffer.__DATA__ + 1 + 192
    ld hl, _attribBuffer.__DATA__ + 192
    ld (hl), a
    ld bc, 383
    ldir

    end asm

end sub

sub fastcall clearScreenBottom(attrib as uByte)

    asm
    
    ld de, _bitmapBuffer.__DATA__ + 1 + 4608
    ld hl, _bitmapBuffer.__DATA__ + 4608
    ld (hl), 0
    ld bc, 1535
    ldir

    ld de, _attribBuffer.__DATA__ + 1 + 576
    ld hl, _attribBuffer.__DATA__ + 576
    ld (hl), a
    ld bc, 383
    ldir

    end asm

end sub


sub clearPixels()

    asm
    
    ld de, _bitmapBuffer.__DATA__ + 1
    ld hl, _bitmapBuffer.__DATA__
    ld (hl), 0
    ld bc, 6143
    ldir

    end asm

end sub

sub clearPixelsTop()

    asm
    
    ld de, _bitmapBuffer.__DATA__ + 1
    ld hl, _bitmapBuffer.__DATA__
    ld (hl), 0
    ld bc, 1535
    ldir

    end asm

end sub

sub clearPixelsCenter()

    asm
    
    ld de, _bitmapBuffer.__DATA__ + 1 + 1536
    ld hl, _bitmapBuffer.__DATA__ + 1536
    ld (hl), 0
    ld bc, 3071
    ldir

    end asm

end sub

sub clearPixelsBottom()

    asm
    
    ld de, _bitmapBuffer.__DATA__ + 1 + 4608
    ld hl, _bitmapBuffer.__DATA__ + 4608
    ld (hl), 0
    ld bc, 1535
    ldir

    end asm

end sub

sub fastcall clearAttribs(attrib as uByte)

    asm
    
    ld de, _attribBuffer.__DATA__ + 1
    ld hl, _attribBuffer.__DATA__
    ld (hl), a
    ld bc, 767
    ldir

    end asm

end sub

sub fastcall clearAttribsTop(attrib as uByte)

    asm

    ld de, _attribBuffer.__DATA__ + 1
    ld hl, _attribBuffer.__DATA__
    ld (hl), a
    ld bc, 191
    ldir

    end asm

end sub

sub fastcall clearAttribsCenter(attrib as uByte)

    asm

    ld de, _attribBuffer.__DATA__ + 1 + 192
    ld hl, _attribBuffer.__DATA__ + 192
    ld (hl), a
    ld bc, 383
    ldir

    end asm

end sub

sub fastcall clearAttribsBottom(attrib as uByte)

    asm
    
    ld de, _bitmapBuffer.__DATA__ + 1 + 4608
    ld hl, _bitmapBuffer.__DATA__ + 4608
    ld (hl), 0
    ld bc, 1535
    ldir

    ld de, _attribBuffer.__DATA__ + 1 + 576
    ld hl, _attribBuffer.__DATA__ + 576
    ld (hl), a
    ld bc, 383
    ldir

    end asm

end sub

sub fastcall printColorChar(charAddress as uinteger, yPos as uinteger, xPos as uinteger, attrib as uInteger)

    asm

    exx
    pop hl
    exx
    pop de
    pop bc
    exx
    pop de
    push hl
    exx
    ex de, hl

    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    
    push bc
    push hl
    
    add hl, hl
    add hl, hl
    add hl, hl

    add hl, bc

    exx
    pop bc
    pop hl
    add hl, bc
    ld bc, _attribBuffer.__DATA__
    add hl, bc
    ld (hl), e
    exx

    ld bc, _bitmapBuffer.__DATA__
    add hl, bc

    ld a, (de)
    ld (hl), a

    inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a
    
     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

    end asm

end sub

sub fastcall drawColorSprite (spriteAddress as uinteger, yPos as uInteger, xPos as uInteger, attrib as uInteger)

asm

    exx
    pop hl
    exx
    pop de
    pop bc
    exx
    pop de
    push hl
    push de
    exx
    ex de, hl

    ;Orden de los registros (optimizado para menor nº de cargas)
    ;de = direccionChar
    ;hl = posicionY
    ;bc = posicionH

    ld a, c ; addrInc = x / 8
    srl a
    srl a
    srl a

    push af
    push hl

    push af ;addrInc
    
    ld a, c  ; if posicionX mod 8 <> 0 then goto print ext
    and 7
    jp nz, dcs_print_ext

dcs_print_simple:

    add hl, hl    ; posicionY = posicionY * 32
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    
    ld bc, _bitmapBuffer.__DATA__

    add hl, bc; videoAddress = _bitmapBuffer.__DATA__ + posicionY
    pop af
    ld c, a
    ld b, 0
    add hl, bc; videoAddress = videoAddress + addrInc
    ld bc, 32

    ld a, (hl); cValue = peek(videoAddress)
    ex de, hl
    xor (hl)  ; cValue = peek(charAddress) xor cValue
    ex de, hl
    ld (hl), a ; poke videoAddress, cValue

    inc de      ;charAddress = charAddress + 1
    add hl, bc  ;videoAddress = videoAddress + 32
    ld a, (hl)  ; cValue = peek(videoAddress)
    ex de, hl
    xor (hl)    ; cValue = peek(charAddress) xor cValue
    ex de, hl
    ld (hl), a  ; poke videoAddress, cValue
    
    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    ;poner attrib
    pop hl          ;y
    ld a, l
    ex af, af'
    

    srl l           ; / 8
    srl l
    srl l

    add hl, hl      ; * 32
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl

    pop af          ;x
    ld e, a
    ld d, 0
    add hl, de      ;+ xChar
    ld de, _attribBuffer.__DATA__    
    add hl, de      ;attribAddress = attribBuffer + (xChar + (y / 8) * 32)
    pop de          ;attrib
    ld (hl), e      ;escribe atributo

    ex af, af'
    and 7

    jp z, dcs_print_exit
    
    ld bc, 32
    add hl, bc
    ld (hl), e      ;escribe atributo
    
    jp dcs_print_exit

dcs_print_ext:

    ld a, 8                 ;Init counter vueltas
    ld (dcs_loopCounter), a

    ;stack: addrInc
    

    push bc ;shift = posicionX - addrInc * 8  
    exx
    pop bc
    pop af
    ld l, a
    ld h, 0
    push hl

    add hl, hl
    add hl, hl
    add hl, hl
    
    push de
    push bc
    pop de
    ex de, hl

    sbc hl, de
    pop de
    pop bc
    push hl
    push bc
    exx

    ;stack: addrInc
    ;       shift

    add hl, hl    ; posicionY = posicionY * 32
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    
    ld bc, _bitmapBuffer.__DATA__

    add hl, bc; videoAddress = _bitmapBuffer.__DATA__ + posicionY
    pop bc
    add hl, bc; videoAddress = videoAddress + addrInc

    ;stack: shift
    ex de, hl   
    pop bc
    push bc
    push hl
    
dcs_ext_loop:

    ld a, (hl) 

    ;stack: charAddress
    ;       shift
    ;       de = videoAddress
    ;        c = shift
    ;       hl = charAddress
    ;        a = valor del char

    
    call dcs_rshift ; rotamos (shift) bytes a la derecha

    push de   ;xor con video
    pop hl
    xor (hl)
    ld (hl), a

    pop hl
    pop bc
    push bc
    push hl

    

    inc de     ;videoAddress = videoAddress + 1

    ld a, 8    ;shift = 8 - shift
    sub c
    ld c, a
    ld a, (hl) ;a = char value
    
    ;stack: charAddress
    ;       shift
    ;       de = videoAddress
    ;        c = shift inverso
    ;       hl = charAddress
    ;        a = valor del char

    call dcs_lshift ; rotamos (8 - shift) bytes a la izquierda
    push de   ;xor con video
    pop hl
    xor (hl)
    ld (hl), a

    ld bc, 31   ;videoAddress = videoAddress + 31
    add hl, bc
    push hl
    pop de

    pop hl
    pop bc
    inc hl
    push bc
    push hl

    ;stack: charAddress
    ;       shift
    ;       de = videoAddress
    ;        c = shift
    ;       hl = charAddress
    ;        a = valor del char

    ld a, (dcs_loopCounter)
    dec a
    ld (dcs_loopCounter), a
    jp nz, dcs_ext_loop


    pop hl
    pop hl

    ;poner attrib
    pop hl          ;y
    ld a, l
    ex af, af'      ;guardamos y en a'

    srl l           ; / 8
    srl l
    srl l

    add hl, hl      ; * 32
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    pop af          ;x
    ld e, a
    ld d, 0
    add hl, de      ;+ xChar
    ld de, _attribBuffer.__DATA__    
    add hl, de      ;attribAddress = attribBuffer + (xChar + (y / 8) * 32)
    pop de          ;attrib
    ld (hl), e      ;escribe atributo
    inc hl          ;siguiente char
    ld (hl), e      ;escribe atributo

    ex af, af'      ;y no es char completo?
    and 7

    jp z, dcs_print_exit
    
    ld bc, 31
    add hl, bc
    ld (hl), e      ;escribe atributo
    inc hl          ;siguiente char
    ld (hl), e      ;escribe atributo

    jp dcs_print_exit

dcs_rshift:

    srl a
    dec c
    jr nz, dcs_rshift

    ret

dcs_lshift:

    sla a
    dec c
    jr nz, dcs_lshift

    ret

dcs_print_exit:

    ret

dcs_loopCounter:
defb 0

end asm

end sub

sub fastcall printChar(charAddress as uinteger, yPos as uinteger, xPos as uinteger)

    asm

    exx
    pop hl
    exx
    pop de
    pop bc
    exx
    push hl
    exx
    ex de, hl

    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl

    add hl, bc
    ld bc, _bitmapBuffer.__DATA__
    add hl, bc

    ld a, (de)
    ld (hl), a

    inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a
    
     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

     inc de
    ld bc, 32
    add hl, bc
    ld a, (de)
    ld (hl), a

    end asm

end sub


sub fastcall drawSprite (spriteAddress as uinteger, yPos as uInteger, xPos as uInteger)

asm

    exx
    pop hl
    exx
    pop de
    pop bc
    exx
    push hl
    exx
    ex de, hl

    ;Orden de los registros (optimizado para menor nº de cargas)
    ;de = direccionChar
    ;hl = posicionY
    ;bc = posicionH

    ld a, c ; addrInc = x / 8
    srl a
    srl a
    srl a

    push af ;addrInc
    
    ld a, c  ; if posicionX mod 8 <> 0 then goto print ext
    and 7
    jp nz, ds_print_ext

ds_print_simple:

    add hl, hl    ; posicionY = posicionY * 32
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    
    ld bc, _bitmapBuffer.__DATA__

    add hl, bc; videoAddress = _bitmapBuffer.__DATA__ + posicionY
    pop af
    ld c, a
    ld b, 0
    add hl, bc; videoAddress = videoAddress + addrInc
    ld bc, 32

    ld a, (hl); cValue = peek(videoAddress)
    ex de, hl
    xor (hl)  ; cValue = peek(charAddress) xor cValue
    ex de, hl
    ld (hl), a ; poke videoAddress, cValue

    inc de      ;charAddress = charAddress + 1
    add hl, bc  ;videoAddress = videoAddress + 32
    ld a, (hl)  ; cValue = peek(videoAddress)
    ex de, hl
    xor (hl)    ; cValue = peek(charAddress) xor cValue
    ex de, hl
    ld (hl), a  ; poke videoAddress, cValue
    
    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    inc de
    add hl, bc
    ld a, (hl)
    ex de, hl
    xor (hl)
    ex de, hl
    ld (hl), a

    jp ds_print_exit

ds_print_ext:

    ld a, 8                 ;Init counter vueltas
    ld (ds_loopCounter), a

    ;stack: addrInc
    

    push bc ;shift = posicionX - addrInc * 8  
    exx
    pop bc
    pop af
    ld l, a
    ld h, 0
    push hl

    add hl, hl
    add hl, hl
    add hl, hl
    
    push de
    push bc
    pop de
    ex de, hl

    sbc hl, de
    pop de
    pop bc
    push hl
    push bc
    exx

    ;stack: addrInc
    ;       shift

    add hl, hl    ; posicionY = posicionY * 32
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    
    ld bc, _bitmapBuffer.__DATA__

    add hl, bc; videoAddress = _bitmapBuffer.__DATA__ + posicionY
    pop bc
    add hl, bc; videoAddress = videoAddress + addrInc

    ;stack: shift
    ex de, hl   
    pop bc
    push bc
    push hl
    
ds_ext_loop:

    ld a, (hl) 

    ;stack: charAddress
    ;       shift
    ;       de = videoAddress
    ;        c = shift
    ;       hl = charAddress
    ;        a = valor del char

    
    call ds_rshift ; rotamos (shift) bytes a la derecha

    push de   ;xor con video
    pop hl
    xor (hl)
    ld (hl), a

    pop hl
    pop bc
    push bc
    push hl

    

    inc de     ;videoAddress = videoAddress + 1

    ld a, 8    ;shift = 8 - shift
    sub c
    ld c, a
    ld a, (hl) ;a = char value
    
    ;stack: charAddress
    ;       shift
    ;       de = videoAddress
    ;        c = shift inverso
    ;       hl = charAddress
    ;        a = valor del char

    call ds_lshift ; rotamos (8 - shift) bytes a la izquierda
    push de   ;xor con video
    pop hl
    xor (hl)
    ld (hl), a

    ld bc, 31   ;videoAddress = videoAddress + 31
    add hl, bc
    push hl
    pop de

    pop hl
    pop bc
    inc hl
    push bc
    push hl

    ;stack: charAddress
    ;       shift
    ;       de = videoAddress
    ;        c = shift
    ;       hl = charAddress
    ;        a = valor del char

    ld a, (ds_loopCounter)
    dec a
    ld (ds_loopCounter), a
    jp nz, ds_ext_loop


    pop hl
    pop hl

    jp ds_print_exit

ds_rshift:

    srl a
    dec c
    jr nz, ds_rshift

    ret

ds_lshift:

    sla a
    dec c
    jr nz, ds_lshift

    ret

ds_print_exit:

    ret

ds_loopCounter:
defb 0

end asm

end sub

sub dumpScreen()

asm

    push ix
    push iy
    ld (dsc_restore_stack + 1), sp

    ld de, 384
    ld (dsc_counter), de
    ld hl, _bitmapBuffer.__DATA__
    ld (dsc_copy + 1), hl
    ld hl, _tableCP.__DATA__
    ld (dsc_target + 1), hl

dsc_copy:

    ld sp, 0
    pop bc
    pop de
    pop hl
    pop ix
    pop iy
    exx
    pop bc
    pop de
    pop af
    ld (dsc_copy+1), sp

dsc_target:

    ld sp, 0
    pop hl
    ld (dsc_target + 1), sp
    ld sp, hl
    push af
    push de
    push bc
    exx
    push iy
    push ix
    push hl
    push de
    push bc
    
    ld hl, (dsc_counter)
    ld de, 1
    xor a
    sbc hl, de
    ld (dsc_counter), hl
    jp nz, dsc_copy
    jp dsc_restore_stack

dsc_counter:

    defw 0
    
dsc_restore_stack:

    ld sp, 0

    ld hl, _attribBuffer.__DATA__
    ld de, 22528
    ld bc, 768
    ldir

    pop iy
    pop ix

end asm

end sub


sub dumpPixels()

asm

    push ix
    push iy
    ld de, 384
    ld (dpx_counter), de
    ld (dpx_restore_stack + 1), sp
    ld hl, _bitmapBuffer.__DATA__
    ld (dpx_copy + 1), hl
    ld hl, _tableCP.__DATA__
    ld (dpx_target + 1), hl

dpx_copy:

    ld sp, 0
    pop bc
    pop de
    pop hl
    pop ix
    pop iy
    exx
    pop bc
    pop de
    pop af
    ld (dpx_copy+1), sp

dpx_target:

    ld sp, 0
    pop hl
    ld (dpx_target + 1), sp
    ld sp, hl
    push af
    push de
    push bc
    exx
    push iy
    push ix
    push hl
    push de
    push bc
    
    ld hl, (dpx_counter)
    ld de, 1
    xor a
    sbc hl, de
    ld (dpx_counter), hl
    jp nz, dpx_copy
    jp dpx_restore_stack

dpx_counter:

    defw 0
    
dpx_restore_stack:

    ld sp, 0
    pop iy
    pop ix

end asm

end sub


sub dumpPixelsTop()

asm

    push ix
    push iy
    ld a, 96
    ld (dpt_counter), a
    ld (dpt_restore_stack + 1), sp
    ld hl, _bitmapBuffer.__DATA__
    ld (dpt_copy + 1), hl
    ld hl, _tableCP.__DATA__
    ld (dpt_target + 1), hl

dpt_copy:

    ld sp, 0
    pop bc
    pop de
    pop hl
    pop ix
    pop iy
    exx
    pop bc
    pop de
    pop af
    ld (dpt_copy+1), sp

dpt_target:

    ld sp, 0
    pop hl
    ld (dpt_target + 1), sp
    ld sp, hl
    push af
    push de
    push bc
    exx
    push iy
    push ix
    push hl
    push de
    push bc
    
    ld a, (dpt_counter)
    dec a
    ld (dpt_counter), a
    jp nz, dpt_copy
    jp dpt_restore_stack

dpt_counter:

    defb 0
    

dpt_restore_stack:

    ld sp, 0
    pop iy
    pop ix

end asm

end sub



sub dumpPixelsCenter()

asm

    push ix
    push iy
    ld a, 192
    ld (dph_counter), a
    ld (dph_restore_stack + 1), sp
    ld hl, _bitmapBuffer.__DATA__ + 1536
    ld (dph_copy + 1), hl
    ld hl, _tableCP.__DATA__ + 192
    ld (dph_target + 1), hl

dph_copy:

    ld sp, 0
    pop bc
    pop de
    pop hl
    pop ix
    pop iy
    exx
    pop bc
    pop de
    pop af
    ld (dph_copy+1), sp

dph_target:

    ld sp, 0
    pop hl
    ld (dph_target + 1), sp
    ld sp, hl
    push af
    push de
    push bc
    exx
    push iy
    push ix
    push hl
    push de
    push bc
    
    ld a, (dph_counter)
    dec a
    ld (dph_counter), a
    jp nz, dph_copy
    jp dph_restore_stack

dph_counter:

    defb 0
    

dph_restore_stack:

    ld sp, 0
    pop iy
    pop ix

end asm

end sub

sub dumpPixelsBottom()

asm

    push ix
    push iy
    ld a, 96
    ld (dpb_counter), a
    ld (dpb_restore_stack + 1), sp
    ld hl, _bitmapBuffer.__DATA__ + 4096
    ld (dpb_copy + 1), hl
    ld hl, _tableCP.__DATA__ + 576
    ld (dpb_target + 1), hl

dpb_copy:

    ld sp, 0
    pop bc
    pop de
    pop hl
    pop ix
    pop iy
    exx
    pop bc
    pop de
    pop af
    ld (dpb_copy+1), sp

dpb_target:

    ld sp, 0
    pop hl
    ld (dpb_target + 1), sp
    ld sp, hl
    push af
    push de
    push bc
    exx
    push iy
    push ix
    push hl
    push de
    push bc
    
    ld a, (dpb_counter)
    dec a
    ld (dpb_counter), a
    jp nz, dpb_copy
    jp dpb_restore_stack

dpb_counter:

    defb 0
    

dpb_restore_stack:

    ld sp, 0
    pop iy
    pop ix

end asm

end sub

sub dumpScreenTop()

asm

    push ix
    push iy
    ld a, 96
    ld (dst_counter), a
    ld (dst_restore_stack + 1), sp
    ld hl, _bitmapBuffer.__DATA__
    ld (dst_copy + 1), hl
    ld hl, _tableCP.__DATA__
    ld (dst_target + 1), hl

dst_copy:

    ld sp, 0
    pop bc
    pop de
    pop hl
    pop ix
    pop iy
    exx
    pop bc
    pop de
    pop af
    ld (dst_copy+1), sp

dst_target:

    ld sp, 0
    pop hl
    ld (dst_target + 1), sp
    ld sp, hl
    push af
    push de
    push bc
    exx
    push iy
    push ix
    push hl
    push de
    push bc
    
    ld a, (dst_counter)
    dec a
    ld (dst_counter), a
    jp nz, dst_copy
    jp dst_restore_stack

dst_counter:

    defb 0
    

dst_restore_stack:

    ld sp, 0

    ld hl, _attribBuffer.__DATA__
    ld de, 22528
    ld bc, 192
    ldir

    pop iy
    pop ix

end asm

end sub


sub dumpScreenCenter()

asm

    push ix
    push iy
    ld a, 192
    ld (dsh_counter), a
    ld (dsh_restore_stack + 1), sp
    ld hl, _bitmapBuffer.__DATA__ + 1536
    ld (dsh_copy + 1), hl
    ld hl, _tableCP.__DATA__ + 192
    ld (dsh_target + 1), hl

dsh_copy:

    ld sp, 0
    pop bc
    pop de
    pop hl
    pop ix
    pop iy
    exx
    pop bc
    pop de
    pop af
    ld (dsh_copy+1), sp

dsh_target:

    ld sp, 0
    pop hl
    ld (dsh_target + 1), sp
    ld sp, hl
    push af
    push de
    push bc
    exx
    push iy
    push ix
    push hl
    push de
    push bc
    
    ld a, (dsh_counter)
    dec a
    ld (dsh_counter), a
    jp nz, dsh_copy
    jp dsh_restore_stack

dsh_counter:

    defb 0
    

dsh_restore_stack:

    ld sp, 0

    ld hl, _attribBuffer.__DATA__ + 192
    ld de, 22528 + 192
    ld bc, 384
    ldir

    pop iy
    pop ix

end asm

end sub


sub dumpScreenBottom()

asm

    push ix
    push iy
    ld a, 96
    ld (dsb_counter), a
    ld (dsb_restore_stack + 1), sp
    ld hl, _bitmapBuffer.__DATA__ + 4608
    ld (dsb_copy + 1), hl
    ld hl, _tableCP.__DATA__ + 576
    ld (dsb_target + 1), hl

dsb_copy:

    ld sp, 0
    pop bc
    pop de
    pop hl
    pop ix
    pop iy
    exx
    pop bc
    pop de
    pop af
    ld (dsb_copy+1), sp

dsb_target:

    ld sp, 0
    pop hl
    ld (dsb_target + 1), sp
    ld sp, hl
    push af
    push de
    push bc
    exx
    push iy
    push ix
    push hl
    push de
    push bc
    
    ld a, (dsb_counter)
    dec a
    ld (dsb_counter), a
    jp nz, dsb_copy
    jp dsb_restore_stack

dsb_counter:

    defb 0
    

dsb_restore_stack:

    ld sp, 0

    ld hl, _attribBuffer.__DATA__ + 576
    ld de, 22528 + 576
    ld bc, 192
    ldir

    pop iy
    pop ix

end asm

end sub



sub dumpAttribs()

asm

    xor a
    ld de, 22528
    ld hl, _attribBuffer.__DATA__
    ld bc, 768
    ldir

end asm

end sub

sub dumpAttribsTop()

asm

    xor a
    ld de, 22528
    ld hl, _attribBuffer.__DATA__
    ld bc, 192
    ldir

end asm

end sub

sub dumpAttribsCenter()

asm

    xor a
    ld de, 22528 + 192
    ld hl, _attribBuffer.__DATA__ + 192
    ld bc, 384
    ldir

end asm

end sub

sub dumpAttribsBottom()

asm

    xor a
    ld de, 22528 + 576
    ld hl, _attribBuffer.__DATA__ + 576
    ld bc, 192
    ldir

end asm

end sub

sub fastcall dumpAttrib(attrib as uByte)

asm

    ld de, 22529
    ld hl, 22528
    ld (hl), a
    ld bc, 767
    ldir

end asm

end sub

sub fastcall dumpAttribTop(attrib as uByte)

asm

    ld de, 22529
    ld hl, 22528
    ld (hl), a
    ld bc, 191
    ldir

end asm

end sub


sub fastcall dumpAttribCenter(attrib as uByte)

asm

    ld de, 22529 + 192
    ld hl, 22528 + 192
    ld (hl), a
    ld bc, 383
    ldir

end asm

end sub

sub fastcall dumpAttribBottom(attrib as uByte)

asm

    ld de, 22529 + 576
    ld hl, 22528 + 576
    ld (hl), a
    ld bc, 191
    ldir

end asm

end sub
